import numpy as np

from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
import numpy as np
import math


#from models import create_model

import functools
from nltk.util import skipgrams
from nltk import word_tokenize
from sklearn.feature_extraction.text import CountVectorizer
tokenizer = RegexpTokenizer(r'\w+')
sw=set(stopwords.words('english'))

def load_data(fn):
     data=[];voc=dict();Dvoc={}
     with open(fn) as f:
          abs=f.readlines();j=0
          for lines in abs[1:]:
              text=lines.split('\t')
              if len(text)>1:
                 text=text[1]
                 sen=tokenizer.tokenize(text)
                 if len(sen)>=10:
                    words=[];dv={}
                    for w in sen:
                        w=w.lower()
                        if w not in sw and w.isalpha():
                             words.append(w)
                             if w in dv:
                                dv[w]+=1
                             else:
                                dv[w]=1
                             if w in voc:
                               voc[w]+=1
                             else:
                               voc[w]=1
                    if len(words)>0:
                       data.append(words);Dvoc['d'+str(j)]=dv
                       j+=1
     fw,kp=[],[]
     x=sorted(list(voc.values()), reverse=True)[:10000]     
     for w in voc:
        if voc[w]>10:
            kp.append(w)
        if voc[w]>x[-1] and len(w)>4:
            fw.append(w)
     return data,voc,fw,Dvoc



def DF(v,D):
    df={}
    for w in v:
        for d in D:
            if w in D[d]:
               if w in df:
                  df[w]+=1
               else:
                  df[w]=1
    return df



def wfc(v,df):
    sm=0
    for w in v:
        s=df[w]
        sm+=s
    return sm

'''
def fc(w,D):
    s=0
    for d in D:
        if w in D[d]:
            s+=1
    return s
'''
def Pc(w,df,n12):
    n=df[w]
    d=[df[w] for w in n12]
    d=sum(d)
    p=n/d
    return p

def rec_prec(voc1,df1,voc2,df2):
    n12=list(set(list(voc1.keys())).intersection(set(voc2.keys())))
    ur=len(n12)/len(set(voc2.keys()))
    up=len(n12)/len(set(voc1.keys()))
    wr=wfc(n12,df2)/wfc(voc2,df2)
    wp=wfc(n12,df1)/wfc(voc1,df1)
    return [ur,up,wr,wp]

def KLD(v1,DF1,v2,DF2):
    n12=list(set(list(v1.keys())).intersection(set(v2.keys())))
    kl=0
    for w in n12:
        pc=Pc(w,DF2,n12)
        po=Pc(w,DF1,n12)
        kl+=pc*math.log(pc/po)
    return kl
 

def comcha(v1,df1,v2,df2,D1,D2):
       n12=list(set(list(v1.keys())).intersection(set(v2.keys())))
       n=wfc(n12,df2)
       d=wfc(n12,df1)
       chd=n/d
       chpd=(n/len(D2))/(d/len(D2))
       chv=0
       for w in n12:
           ch=v2[w]/v1[w]
           chv+=ch
       achv=chv/len(n12)
       return [chd,chpd,achv]

def KLD_v(v1,v2):
    n12=list(set(list(v1.keys())).intersection(set(v2.keys())))
    kl=0
    for w in n12:
        pc=Pc(w,v2,n12)
        po=Pc(w,v1,n12)
        kl+=pc*math.log(pc/po)
    return kl

fpath='/home/roy/mocha/streams/arxiv/processed_data/20200101/per_year/'
rp,kl=[],[]
f1=fpath+'1993.tsv'
data1,voc1,fw1,Dvoc1=load_data(f1)
df1=DF(voc1,Dvoc1)
f=1994
while(f<2020):
    f2=fpath+str(f)+'.tsv'
    data2,voc2,fw2,Dvoc2=load_data(f2)
    df2=DF(voc2,Dvoc2)
    st=rec_prec(voc1,df1,voc2,df2)
    rp.append(st)
    k=KLD(voc1,df1,voc2,df2)
    kl.append(k)
    f+=1


while(f<2020):
    f2=fpath+str(f)+'.tsv'
    data2,voc2,fw2,Dvoc2=load_data(f2)
    df2=DF(voc2,Dvoc2)
    k=KLD_v(voc1,voc2)
    klv.append(k)
    f+=1   

#wr0102=sm0102/sm02
'''
KLD = [0.025388160645781126, 0.036937861498200664, 0.05363667058222492, 0.07556996655567502, 0.08588177301354602, 0.09848673372769721, 0.10746758318245188, 0.1141284176828432, 0.11198143770838709, 0.11892317478620942, 0.12154352718965034, 0.12398766468904997, 0.12931066890373158, 0.13486262585676692, 0.1373645570699258, 0.14632012382458018, 0.15549618321086975, 0.1586889061469684, 0.17119593380636425, 0.18198240404146887, 0.19028832038555793, 0.20326370216327408, 0.22700039650363824, 0.2587103290711334, 0.30162126655989496, 0.3402502769383322]


KLD_v = [0.03288618194569477, 0.04745796098924312, 0.06818361410284134, 0.0951382920216376, 0.10966656359113905, 0.12258114910143668, 0.13409444834675568, 0.1409272363757187, 0.13781402692289174, 0.1459668788471301, 0.14836432103119973, 0.15108901360944774, 0.15723603466283984, 0.16297429459800467, 0.16493904458732872, 0.17403207420079236, 0.1841442637651657, 0.18603359050560297, 0.1973415058431167, 0.20818404103747087, 0.21494638706090952, 0.22710781129977656, 0.2518057460676365, 0.2846897739746516, 0.3297595448760528, 0.37088839145085134]



Rec_prec = [[0.5585088022091819, 0.725003200614518, 0.9714333631484794, 0.9830857808544481], [0.5032968939788305, 0.7426705927538088, 0.9697807951139159, 0.9842635353758413], [0.4758370246218923, 0.763282550249648, 0.968826720896519, 0.9856749205495761], [0.4296850086808631, 0.776277045192677, 0.9655267272539712, 0.9863534095673352], [0.38237454100367196, 0.7998975803354244, 0.9612396356685251, 0.9877807968405454], [0.3536756847966702, 0.8050185635642043, 0.95937566771546, 0.9883696741012421], [0.32933184681998495, 0.8130841121495327, 0.9553726451271213, 0.9885777013944229], [0.3084602368866328, 0.8168608372807579, 0.9520619030728202, 0.9888561379252958], [0.29604535398230086, 0.8223018819613366, 0.9510623441396509, 0.9891601778153294], [0.2763391046305587, 0.8285750864165919, 0.9474825218642838, 0.9892625912519722], [0.2601528905876732, 0.8365126104212008, 0.9459334771364494, 0.9898866731315149], [0.24269537776127714, 0.8368966841633594, 0.9429379201481404, 0.9901139029440663], [0.23285615942668525, 0.8444501344258097, 0.9411874022860341, 0.9904659491325262], [0.21658956041261382, 0.8480988349763154, 0.9378062033457448, 0.9907827907021401], [0.20798710545670782, 0.8507873511714249, 0.9363068543388897, 0.9906899785251825], [0.19654882775084365, 0.8537959288183331, 0.9338998197213371, 0.9910484255534326], [0.1839887833509739, 0.8568045064652413, 0.9307361647729822, 0.9914356763607385], [0.1729491160093403, 0.8628856740494175, 0.9298915014490152, 0.9916501044937096], [0.1602745734982039, 0.8653821533734477, 0.9263559742929303, 0.9917973238088837], [0.14986090258765344, 0.8689668416335936, 0.92331240232548, 0.9920501569805958], [0.14422832173765485, 0.8705031366022277, 0.9209856729899366, 0.9919957498423794], [0.13857933054052954, 0.8724235053130202, 0.9189944561161522, 0.992306190572203], [0.13111032348912283, 0.8761362181538855, 0.9145928863668596, 0.992411804428741], [0.12201260106734253, 0.8751760337984893, 0.9096717418805597, 0.9922037771355602], [0.11306807436460363, 0.8802330047369095, 0.9027563168219777, 0.9927318464182501], [0.10461775308472612, 0.8786967097682755, 0.8986117965435138, 0.9924758128266429]]
'''

